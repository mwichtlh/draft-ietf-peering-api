{
  "magic": "E!vIA5L86J2I",
  "timestamp": "2024-01-18T01:22:31.093645+00:00",
  "repo": "bgp/draft-ietf-peering-api",
  "labels": [
    {
      "name": "bug",
      "description": "Something isn't working",
      "color": "d73a4a"
    },
    {
      "name": "documentation",
      "description": "Improvements or additions to documentation",
      "color": "0075ca"
    },
    {
      "name": "duplicate",
      "description": "This issue or pull request already exists",
      "color": "cfd3d7"
    },
    {
      "name": "enhancement",
      "description": "New feature or request",
      "color": "a2eeef"
    },
    {
      "name": "good first issue",
      "description": "Good for newcomers",
      "color": "7057ff"
    },
    {
      "name": "help wanted",
      "description": "Extra attention is needed",
      "color": "008672"
    },
    {
      "name": "invalid",
      "description": "This doesn't seem right",
      "color": "e4e669"
    },
    {
      "name": "question",
      "description": "Further information is requested",
      "color": "d876e3"
    },
    {
      "name": "wontfix",
      "description": "This will not be worked on",
      "color": "ffffff"
    }
  ],
  "issues": [
    {
      "number": 2,
      "id": "I_kwDOKwWQEM55Vo5K",
      "title": "Do one sentence per line",
      "url": "https://github.com/bgp/draft-ietf-peering-api/issues/2",
      "state": "CLOSED",
      "author": "job",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "tip: By adhering to the convention of a single sentence per line; the git diffs will be much easier to read & review, and overly long sentences are more easily recognized",
      "createdAt": "2023-12-11T13:45:06Z",
      "updatedAt": "2024-01-10T21:52:10Z",
      "closedAt": "2024-01-10T21:52:10Z",
      "comments": []
    },
    {
      "number": 3,
      "id": "I_kwDOKwWQEM55VpzK",
      "title": "Clarify this doc is about inter-domain peering",
      "url": "https://github.com/bgp/draft-ietf-peering-api/issues/3",
      "state": "OPEN",
      "author": "job",
      "authorAssociation": "NONE",
      "assignees": [
        "jramseyer"
      ],
      "labels": [],
      "body": "The document should clarify that the proposed methodology applies in context of inter-domain interconnection in the _Global Internet Routing System_.\r\n\r\nThe word _peering_ is used in many contexts in IETF, so clarification that this is about interconnecting Autonomous Systems that participate in the global Internet routing system is perhaps useful.",
      "createdAt": "2023-12-11T13:47:01Z",
      "updatedAt": "2023-12-21T19:37:09Z",
      "closedAt": null,
      "comments": []
    },
    {
      "number": 4,
      "id": "I_kwDOKwWQEM55Vr2a",
      "title": "In addition to PeeringDB OAuth, propose that RPKI can also be used",
      "url": "https://github.com/bgp/draft-ietf-peering-api/issues/4",
      "state": "OPEN",
      "author": "job",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "[RFC 9323](https://datatracker.ietf.org/doc/html/rfc9323) specifies a mechanism for Autonomous System holders to issue a signature over an arbitrary SHA256 message digest, then in turn, Relying Parties can verify this signature against the global RPKI.\r\n\r\nThis means that the Initiator and the Receiver can perform a challenge/response procedure based on the RPKI - which is cryptographically stronger than relying on PeeringDB's OAuth infrastructure.\r\n\r\nThe Initator and the Receiver can establish an arc of trust by having the Initator signal an arbitrary SHA256 hash over which the Receiver must produce a RPKI-RSC signature; the receiver can challenge the Initator in a similar manner. Once both parties have signed the other-party's challenge, both parties know that each party possesses access to private keys associated with the Autonomous Systems on both sides.",
      "createdAt": "2023-12-11T13:51:21Z",
      "updatedAt": "2023-12-21T19:33:32Z",
      "closedAt": null,
      "comments": [
        {
          "author": "caguado",
          "authorAssociation": "COLLABORATOR",
          "body": "+1 on RFC9323 (or RTA too) to bind API requests to ASN holdership.\r\n\r\nI would build on top of that to, instead of a dynamic challenge/response chain of trust between parties as I understand it, use the RSC/RTA to bind the INRs to a OAuth2 issuer via their well-known discovery point ([RFC8414](https://datatracker.ietf.org/doc/html/rfc8414)). This would allow to:\r\n- reuse current identity management solutions based on bearer tokens for async validation\r\n- maintain attestation of individual caller identities on API requests as well as the capability to constrain access to parts of the API defined in this doc via usual scopes or other claims\r\n- extend the integrity checks to the entire API call payload, beyond reliance on a TLS transport, for proof of possession and HTTP signing when those become standard (e.g. [RFC9449](https://datatracker.ietf.org/doc/html/rfc9449))\r\n\r\nI would also defer this to a separate RFC process that builds atop this doc and now gather consensus on the peering API using a bespoke authz implementation.",
          "createdAt": "2023-12-15T09:56:03Z",
          "updatedAt": "2023-12-15T09:56:03Z"
        },
        {
          "author": "job",
          "authorAssociation": "NONE",
          "body": "The RTA proposal was abandoned by the working group. There are no implementations.",
          "createdAt": "2023-12-15T10:27:21Z",
          "updatedAt": "2023-12-15T10:27:21Z"
        },
        {
          "author": "jramseyer",
          "authorAssociation": "COLLABORATOR",
          "body": "I like the idea of splitting it into two proposals, or having authentication be a \"future work\" part of this RFC.\r\n\r\nTrying to tackle both the idea of a machine-to-machine peering API, and machine-to-machine API network verification seems like two related projects.  We could put them all into one RFC, but I worry that we risk distracting ourselves in one or the other, and achieving neither.  If you think it would be appropriate, I would propose we submit\r\n* peering API, with \"future work\" or \"proposed discussion\" around authentication and different options\r\n* (second) send an amendment or second RFC around API authentication for network configuration\r\nIf you think it would be more appropriate just to file one, larger, RFC, please let me know and we can rescope.",
          "createdAt": "2023-12-21T19:32:32Z",
          "updatedAt": "2023-12-21T19:32:32Z"
        },
        {
          "author": "job",
          "authorAssociation": "NONE",
          "body": "Id stick it in one larger doc, that way people have a complete spec to look at. ",
          "createdAt": "2023-12-21T19:33:31Z",
          "updatedAt": "2023-12-21T19:33:31Z"
        }
      ]
    },
    {
      "number": 6,
      "id": "I_kwDOKwWQEM57sn8j",
      "title": "PeeringDB OAuth token usage",
      "url": "https://github.com/bgp/draft-ietf-peering-api/issues/6",
      "state": "OPEN",
      "author": "jramseyer",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "After our discussion today, I thought more about whether or not you could impersonate someone with the PeeringDB Token.\r\n\r\nThe token we ask for from the user is the access token, not the authorization code.  Authorization code comes first, and is what you use to get a token.  The token is then put in the headers of the call.\r\n\r\nOf note: when you go to register an oauth app on PeeringDB, you get a client ID, which you pass back in order to get an authorization code.  \r\nLater, you take the authorization code, and pass that back to peeringDB to get a token.\r\n\r\nOnce you have the token, one can \"forget about\" the client ID (PeeringDB does not need the client ID to validate the token, it validates the token on its own).  I don't believe this poses a problem to the API, as our implementation only wants the token.  Clients can set up their own \"token-fetching\" method separately.\r\n\r\nIt turns out the lead author on OAuth comes to the IETF regularly (as it is an IETF working group), so maybe we can get his opinion as well.\r\n\r\nAnyway, it doesn't look like you can take actions on PeeringDB with only the access token (at least from a quick look, I didn't poke too hard), but maybe @grizz would have a better idea (looking at https://github.com/peeringdb/peeringdb/issues/131)\r\ncc @caguado for discussion as well.",
      "createdAt": "2024-01-10T22:07:31Z",
      "updatedAt": "2024-01-12T15:51:04Z",
      "closedAt": null,
      "comments": [
        {
          "author": "job",
          "authorAssociation": "NONE",
          "body": "Yeah, this type of issue is exactly why I think that also mentioning RPKI-based authentication as a option will resolve some trust issues: with RPKI the trust arc is build directly between the two parties, without an intermediate.\r\n\r\nIf the draft offers multiple ways to establish trust between parties, consumers of this technology can choose what risk appetite they have and whether they will offer one or all auth options.",
          "createdAt": "2024-01-10T22:19:18Z",
          "updatedAt": "2024-01-10T22:19:18Z"
        },
        {
          "author": "caguado",
          "authorAssociation": "COLLABORATOR",
          "body": "About the trust via PeeringDB's OAuth2/OIDC (or any other third party for the matter), what I referred to in the call is that we should probably use the standard as intended when multiple parties are involved, not only in terms of crypto validation but also adequate scoping to each consuming audience. Ref [rfc8725](https://www.rfc-editor.org/rfc/rfc8725#section-2.8) with one more recent example of this scenario in [rfc9068](https://datatracker.ietf.org/doc/html/rfc9068#SecurityConsiderations).\r\n\r\nUnfortunately it is a bit more nuanced than the access tokens being just cryptographically valid, but to verify among other things whether the consuming API (resource server - RS) is the intended audience to trust the scopes the bearer claims to have. Currently the access token PeeringDB hands over to the client is for the use of the PeeringDB RS alone, unless modified to include other RSs, e.g. our collective autopeer APIs. As a counter example, having direct possession of the current access token handed over by PeeringDB means the new consuming service can in turn use it to reach to PeeringDB's API itself during the time period such token is valid.\r\n\r\nUsing Id Tokens for third-party purposes would follow a similar reasoning where those tokens are not expected to be shared outside the original Oauth2 client-AS relation.\r\n\r\nI found [this resource from auth0](https://auth0.com/blog/how-the-jwt-profile-for-oauth-20-access-tokens-became-rfc9068/) useful to understand the nuanced context on all this. As we spoke, I'll bring more of this summarized to our next meeting.",
          "createdAt": "2024-01-11T10:16:46Z",
          "updatedAt": "2024-01-11T10:16:46Z"
        },
        {
          "author": "jramseyer",
          "authorAssociation": "COLLABORATOR",
          "body": "Thank you both for the quick reply!\r\n\r\nRegarding RPKI-based authentication--let me take another pass through RFC 9323 to understand it better.  From discussion in issue #4, probably we should give a full spec, with alternate auth options (and cover the private peering and maintenance ideas, but that's another thread).  I was trying to keep it simpler by only proposing one authentication model, but if you think the IETF audience would prefer to see all the options, we can list the full spec and discuss. \r\n\r\nPeeringDB--thanks for the article, that was a neat insight into the IETF process as well.  Re: \r\n\r\n> \"having direct possession of the current access token handed over by PeeringDB means the new consuming service can in turn use it to reach to PeeringDB's API itself during the time period such token is valid.\"\r\n\r\nIsn't this token only for the identity?  Could the API could issue GET/DELETE requests to PeeringDB, based on the permissions of the token?  \r\n I had thought that the token was only the ID token, and therefore, could only be used to get the identity and permissions of the user, as described in the OpenID spec here: https://openid.net/specs/openid-connect-core-1_0.html\r\n\r\nFrom what I can understand from here: https://docs.peeringdb.com/howto/authenticate/\r\nOAuth can be used to verify your identity, but other endpoints are behind user/pass or API-key-based authentication.  \r\n\r\nI guess a malicious provider might be able to take that token and use it to auth against some other server's endpoint, to incorrectly request peering?\r\n\r\nJust thinking through possibilities, I am not an expert on OAuth intricacies and best practices.  I will look forward to your summary as well.",
          "createdAt": "2024-01-11T18:43:43Z",
          "updatedAt": "2024-01-11T18:43:43Z"
        },
        {
          "author": "grizz",
          "authorAssociation": "NONE",
          "body": "> Anyway, it doesn't look like you can take actions on PeeringDB with only the access token (at least from a quick look, I didn't poke too hard), but maybe @grizz would have a better idea (looking at [peeringdb/peeringdb#131](https://github.com/peeringdb/peeringdb/issues/131))\r\n\r\nRight, I don't think there is risk in using the access token, as this is exactly what OAuth2 was designed for, as Carlos said, we need to make sure we're using it correctly. It's been a while, and we should definitely verify that, but that is what the review is for. :)\r\n\r\nRegarding RPKI, @job we are definitely planning on supporting it in a future iteration, like Jenny says, it would need a thread just for it. Our idea is that PDB, or other OAuth2 providers can say who the party is that is doing the request (and with PeeringDB scopes, it can give some authorization for if that party is allowed to do it), while RPKI signing would prove that they're allowed to make requests. Having both would be ideal, and it would be up to the server to decide what level of authentication and authorization they require.",
          "createdAt": "2024-01-12T03:59:46Z",
          "updatedAt": "2024-01-12T03:59:46Z"
        },
        {
          "author": "grizz",
          "authorAssociation": "NONE",
          "body": "Err, posted too quickly and missed a paragraph.\r\n\r\n> Isn't this token only for the identity? Could the API could issue GET/DELETE requests to PeeringDB, based on the permissions of the token?\r\n\r\nThat's correct.\r\n\r\n> I had thought that the token was only the ID token, and therefore, could only be used to get the identity and permissions of the user, as described in the OpenID spec here: https://openid.net/specs/openid-connect-core-1_0.html\r\n\r\nYes, I think we discussed this last NANOG and realized we were technically using OIDC and not OAuth. I can double check in our implementation later, but to reiterate, as long as we're following the standards how it's supposed to be done, we should be fine.",
          "createdAt": "2024-01-12T04:09:22Z",
          "updatedAt": "2024-01-12T04:09:22Z"
        },
        {
          "author": "jramseyer",
          "authorAssociation": "COLLABORATOR",
          "body": "That's right, I remember we decided it was OIDC at NANOG88, I think.  \r\n\r\nI updated the security considerations section here: https://github.com/bgp/draft-ietf-peering-api/pull/8\r\nOf course, if we discover we are using the tokens incorrectly, we can edit or scrap this section, but I figured I would keep the draft up to date for now.  Let me know if that looks sensible.  \r\n\r\nThanks all of you for reviewing the implementation--if we are using it incorrectly, let me know and I will hold off submitting a draft.  I'm planning to submit in a week or two if we can manage it.",
          "createdAt": "2024-01-12T15:51:03Z",
          "updatedAt": "2024-01-12T15:51:03Z"
        }
      ]
    }
  ],
  "pulls": [
    {
      "number": 1,
      "id": "PR_kwDOKwWQEM5hrq-v",
      "title": "Update draft-ramseyer-grow-peering-api.md",
      "url": "https://github.com/bgp/draft-ietf-peering-api/pull/1",
      "state": "MERGED",
      "author": "therealr2d2",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Added/changed some text and some rewriting to the introduction.",
      "createdAt": "2023-12-11T13:26:23Z",
      "updatedAt": "2024-01-09T20:36:06Z",
      "baseRepository": "bgp/draft-ietf-peering-api",
      "baseRefName": "main",
      "baseRefOid": "f0e4a1800c41b3ffd9d20fa512ec93a9cd7095ba",
      "headRepository": "bgp/draft-ietf-peering-api",
      "headRefName": "therealr2d2-patch-1",
      "headRefOid": "82605ed595ce1343a2938f0d6b84a80837e0d169",
      "closedAt": "2024-01-09T20:36:05Z",
      "mergedAt": "2024-01-09T20:36:05Z",
      "mergedBy": "jramseyer",
      "mergeCommit": {
        "oid": "e38d8a01def9c25cc3b5d12ba6ce7c6e41681a47"
      },
      "comments": [
        {
          "author": "jramseyer",
          "authorAssociation": "COLLABORATOR",
          "body": "merged with later changes, to fix the build process",
          "createdAt": "2024-01-09T20:34:20Z",
          "updatedAt": "2024-01-09T20:34:20Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOKwWQEM5q52QV",
          "commit": {
            "abbreviatedOid": "09f0647"
          },
          "author": "jramseyer",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Looks good to me.  Thanks!",
          "createdAt": "2023-12-21T19:28:03Z",
          "updatedAt": "2023-12-21T19:28:03Z",
          "comments": []
        }
      ]
    },
    {
      "number": 5,
      "id": "PR_kwDOKwWQEM5imhy3",
      "title": "Ramseyer patch intro",
      "url": "https://github.com/bgp/draft-ietf-peering-api/pull/5",
      "state": "MERGED",
      "author": "jramseyer",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Feedback from https://github.com/bgp/draft-ietf-peering-api/issues/3 -- added clarification around Peering\r\nSwitched intro to one-sentence-per-line, as in https://github.com/bgp/draft-ietf-peering-api/issues/2\r\nRemoved trailing whitespace to fix lint errors",
      "createdAt": "2023-12-21T19:56:49Z",
      "updatedAt": "2024-01-09T20:27:18Z",
      "baseRepository": "bgp/draft-ietf-peering-api",
      "baseRefName": "main",
      "baseRefOid": "c34f72263856a8210e3c60e6874706deb9f9ee56",
      "headRepository": "bgp/draft-ietf-peering-api",
      "headRefName": "ramseyer_patch_intro",
      "headRefOid": "88b2cef67293444c81537e1cb18a7c8b14433a36",
      "closedAt": "2024-01-09T20:27:00Z",
      "mergedAt": "2024-01-09T20:27:00Z",
      "mergedBy": "jramseyer",
      "mergeCommit": {
        "oid": "f0e4a1800c41b3ffd9d20fa512ec93a9cd7095ba"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 7,
      "id": "PR_kwDOKwWQEM5jvB3o",
      "title": "Update draft-ramseyer-grow-peering-api.md (Abstract)",
      "url": "https://github.com/bgp/draft-ietf-peering-api/pull/7",
      "state": "MERGED",
      "author": "jramseyer",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Adding an abstract to the doc",
      "createdAt": "2024-01-10T22:15:44Z",
      "updatedAt": "2024-01-16T19:56:20Z",
      "baseRepository": "bgp/draft-ietf-peering-api",
      "baseRefName": "main",
      "baseRefOid": "c13eb5f55f64ddaa140bc17af764f94b2b44421e",
      "headRepository": "bgp/draft-ietf-peering-api",
      "headRefName": "jramseyer-patch-abstract",
      "headRefOid": "c57c5bd8308c966899a8d3f5f97fa72711bebf20",
      "closedAt": "2024-01-16T19:56:17Z",
      "mergedAt": "2024-01-16T19:56:17Z",
      "mergedBy": "jramseyer",
      "mergeCommit": {
        "oid": "10c22732681f470a4b8b4c609f24c8b332731500"
      },
      "comments": [
        {
          "author": "grizz",
          "authorAssociation": "NONE",
          "body": "@jramseyer probably want to `s/OAuth/OIDC` or similar?",
          "createdAt": "2024-01-12T19:16:59Z",
          "updatedAt": "2024-01-12T19:16:59Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOKwWQEM5slBo_",
          "commit": {
            "abbreviatedOid": "8cc612a"
          },
          "author": "therealr2d2",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-01-15T13:01:54Z",
          "updatedAt": "2024-01-15T13:01:54Z",
          "comments": [
            {
              "originalPosition": 1,
              "body": "--> 'Private (paid) peering'\r\n\r\nI think that private peering and paid peering are regularly two separated things.\r\n\r\nPrivate peering is done on private interfaces (mostly link to link,) and paid peering could be private peering or public peering but you pay to your peer to connect .\r\n\r\n",
              "createdAt": "2024-01-15T13:01:54Z",
              "updatedAt": "2024-01-15T13:01:54Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOKwWQEM5svxh3",
          "commit": {
            "abbreviatedOid": "8cc612a"
          },
          "author": "jramseyer",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-01-16T17:58:16Z",
          "updatedAt": "2024-01-16T17:58:16Z",
          "comments": [
            {
              "originalPosition": 1,
              "body": "Good catch.  I will fix.",
              "createdAt": "2024-01-16T17:58:16Z",
              "updatedAt": "2024-01-16T17:58:16Z"
            }
          ]
        }
      ]
    },
    {
      "number": 8,
      "id": "PR_kwDOKwWQEM5j2dxI",
      "title": "Security Considerations section",
      "url": "https://github.com/bgp/draft-ietf-peering-api/pull/8",
      "state": "MERGED",
      "author": "jramseyer",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Security Considerations, one typo.\r\n\r\nAdding a section on Security Considerations.\r\nSince we are still in discussions around security considerations for the API, I left this one somewhat ambiguous.  \r\n\r\nThis is by no means perfect, but now we have something.  Trying to get the draft into a minimal reasonable state before we submit for March.\r\n\r\nfrom discussions in:\r\nhttps://github.com/bgp/draft-ietf-peering-api/issues/6 \r\nhttps://github.com/bgp/draft-ietf-peering-api/issues/4",
      "createdAt": "2024-01-11T19:39:56Z",
      "updatedAt": "2024-01-12T23:15:00Z",
      "baseRepository": "bgp/draft-ietf-peering-api",
      "baseRefName": "main",
      "baseRefOid": "e38d8a01def9c25cc3b5d12ba6ce7c6e41681a47",
      "headRepository": "bgp/draft-ietf-peering-api",
      "headRefName": "jramseyer-patch-security-1",
      "headRefOid": "970df359642d92f9ff33135cf5d4457da2ec37d5",
      "closedAt": "2024-01-12T23:14:57Z",
      "mergedAt": "2024-01-12T23:14:57Z",
      "mergedBy": "jramseyer",
      "mergeCommit": {
        "oid": "c13eb5f55f64ddaa140bc17af764f94b2b44421e"
      },
      "comments": [
        {
          "author": "grizz",
          "authorAssociation": "NONE",
          "body": "@jramseyer looks good to me, thanks for writing it up!",
          "createdAt": "2024-01-12T19:13:52Z",
          "updatedAt": "2024-01-12T19:13:52Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOKwWQEM5saeWG",
          "commit": {
            "abbreviatedOid": "970df35"
          },
          "author": "grizz",
          "authorAssociation": "NONE",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-01-12T19:13:09Z",
          "updatedAt": "2024-01-12T19:13:09Z",
          "comments": []
        }
      ]
    },
    {
      "number": 9,
      "id": "PR_kwDOKwWQEM5j21Gt",
      "title": "Sample request flow",
      "url": "https://github.com/bgp/draft-ietf-peering-api/pull/9",
      "state": "MERGED",
      "author": "jramseyer",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Adding a section with sample request flow.\r\n\r\nNot sure if we need this section in addition to the endpoints section.  We can reorder or remove it as necessary.\r\n\r\nTried to follow the spec as we (Meta) understand it, but I will update if I notice any discrepancies between it and the ENDPOINTS section.",
      "createdAt": "2024-01-11T20:50:34Z",
      "updatedAt": "2024-01-16T20:00:52Z",
      "baseRepository": "bgp/draft-ietf-peering-api",
      "baseRefName": "main",
      "baseRefOid": "10c22732681f470a4b8b4c609f24c8b332731500",
      "headRepository": "bgp/draft-ietf-peering-api",
      "headRefName": "jramseyer-patch-example-request",
      "headRefOid": "ce8d28cc7cfbf657caa631ecfa36a12914069864",
      "closedAt": "2024-01-16T20:00:48Z",
      "mergedAt": "2024-01-16T20:00:48Z",
      "mergedBy": "jramseyer",
      "mergeCommit": {
        "oid": "7035f3b3e681e9279486f5c59d4234d0d8a008c9"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 10,
      "id": "PR_kwDOKwWQEM5kP_UZ",
      "title": "Add endpoints, finish draft.",
      "url": "https://github.com/bgp/draft-ietf-peering-api/pull/10",
      "state": "MERGED",
      "author": "jramseyer",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Finish draft!\r\n* endpoints\r\n* endpoint details\r\n* future work\r\nI will merge this tomorrow, so we can submit something to the area directors and request to present at dispatch.\r\n",
      "createdAt": "2024-01-16T21:31:43Z",
      "updatedAt": "2024-01-17T19:10:02Z",
      "baseRepository": "bgp/draft-ietf-peering-api",
      "baseRefName": "main",
      "baseRefOid": "7035f3b3e681e9279486f5c59d4234d0d8a008c9",
      "headRepository": "bgp/draft-ietf-peering-api",
      "headRefName": "ramseyer-patch-endpoints",
      "headRefOid": "f98c15e9bb5b31412b7241b70dbff0f7ff8ed972",
      "closedAt": "2024-01-17T19:09:58Z",
      "mergedAt": "2024-01-17T19:09:58Z",
      "mergedBy": "jramseyer",
      "mergeCommit": {
        "oid": "f15ee58ffe9d9e8ab9a36818d44562d0dfdf76c5"
      },
      "comments": [
        {
          "author": "job",
          "authorAssociation": "NONE",
          "body": "You can also immediately bring it to the GROW chairs :-)",
          "createdAt": "2024-01-16T21:33:25Z",
          "updatedAt": "2024-01-16T21:33:25Z"
        },
        {
          "author": "jramseyer",
          "authorAssociation": "COLLABORATOR",
          "body": "> You can also immediately bring it to the GROW chairs :-)\r\n\r\nThanks, sounds good :) I will email you and the other GROW chair.\r\nShould I submit formally to the IETF site, or is a draft attached sufficient?",
          "createdAt": "2024-01-16T21:36:43Z",
          "updatedAt": "2024-01-16T21:36:43Z"
        },
        {
          "author": "job",
          "authorAssociation": "NONE",
          "body": "If you upload this draft via https://datatracker.ietf.org/submit/ - please\r\n\r\nyou can then bring this draft to the attention of working group via grow@ietf.org by sending a cover letter \r\n\r\nIn the same email you can request a talking slot in the upcoming GROW session at IETF 119",
          "createdAt": "2024-01-16T21:37:20Z",
          "updatedAt": "2024-01-16T21:37:20Z"
        },
        {
          "author": "jramseyer",
          "authorAssociation": "COLLABORATOR",
          "body": "Thanks, I will do so this week!  ",
          "createdAt": "2024-01-16T21:46:39Z",
          "updatedAt": "2024-01-16T21:46:39Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 11,
      "id": "PR_kwDOKwWQEM5kWUdV",
      "title": "Fix formatting",
      "url": "https://github.com/bgp/draft-ietf-peering-api/pull/11",
      "state": "MERGED",
      "author": "jramseyer",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Generated submission didn't match markdown spec, should have checked.\r\n\r\nLet's see if this fixes (will check compiled files, my mistake)",
      "createdAt": "2024-01-17T19:43:55Z",
      "updatedAt": "2024-01-17T20:15:44Z",
      "baseRepository": "bgp/draft-ietf-peering-api",
      "baseRefName": "main",
      "baseRefOid": "f15ee58ffe9d9e8ab9a36818d44562d0dfdf76c5",
      "headRepository": "bgp/draft-ietf-peering-api",
      "headRefName": "jramseyer-patch-formatting",
      "headRefOid": "fddcaf1f89426b20e0bc3c82bfa545b342e52167",
      "closedAt": "2024-01-17T20:15:43Z",
      "mergedAt": "2024-01-17T20:15:43Z",
      "mergedBy": "jramseyer",
      "mergeCommit": {
        "oid": "7ef5865d3728d33711e81de158b2a6d8b846a233"
      },
      "comments": [
        {
          "author": "jramseyer",
          "authorAssociation": "COLLABORATOR",
          "body": "Ok, the generated files look good.  I will resubmit.",
          "createdAt": "2024-01-17T20:15:30Z",
          "updatedAt": "2024-01-17T20:15:30Z"
        }
      ],
      "reviews": []
    }
  ]
}